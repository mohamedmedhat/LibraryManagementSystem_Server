type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    roles: [Role!]!
}

type Book {
    id: ID!
    name: String!
    author: String!
    publishYear: Int!
    price: Float!
    user: User
}

type BookPage {
    content: [Book!]!
    totalPages: Int!
    totalElements: Int!
    size: Int!
    number: Int!
}

input CreateBookInput {
    name: String!
    author: String!
    publishYear: Int!
    price: Float!
}

input UpdateBookInput {
    name: String
    author: String
    publishYear: Int
    price: Float
}

input RegisterInput {
    name: String!
    email: String!
    password: String!
    roles: [String!]!
}

input LogInInput {
    email: String!
    password: String!
}

type AuthData {
    token: String!
    user: User!
}

type Query {
    books(page: Int!, pageSize: Int!): BookPage!
    book(id: ID!): Book
    currentUser: User
}

input UserRequestDto {
    name: String!
    email: String!
    password: String!
    roles: [Role!] = [USER]
}

enum Role {
    USER
    ADMIN
    LIBRARIAN,
    MANAGER
}


type Mutation {
    createBook(data: CreateBookInput!): Book
    updateBook(id: ID!, data: UpdateBookInput!): Book
    deleteBook(id: ID!): Boolean
    register(data: UserRequestDto!): User!
    login(data: LogInInput!): AuthData!
}